// Topological sort

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    //perform topological sort
    bool isCyclic(int src, map<int,list<int>> adj, vector<int> &vis,vector<int> &stack) {
        //cycle present 
        if(vis[src]==2) {
            return true;
        }
        if(vis[src]==1) {
            return false;
        }
        
        //processing
        vis[src] = 2;
        
        //iterate over neighbours
        for(auto child : adj[src]) {
            if(vis[child]!=1) {
                if(isCyclic(child,adj,vis,stack)) {
                    return true;
                }
            }
        }
        //processed
        vis[src] = 1;
        stack.push_back(src);
        return false;
    }
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        //make a directed graph
        map<int,list<int>> adj;
        
        for(int i=0;i<prerequisites.size();i++) {
            adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }
        //0->unprocessed , 1-> processed , 2 -> processing
        vector<int> vis(numCourses,0);
        vector<int> stack;
        
        for(int i=0;i<numCourses;i++) {
            if(vis[i]!=1) {
                if(isCyclic(i,adj,vis,stack)) {
                    vector<int> v;
                    return v;
                }
            }
        }
        return stack;
    }
};
